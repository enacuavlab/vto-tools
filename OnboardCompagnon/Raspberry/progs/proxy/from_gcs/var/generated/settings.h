/* This file has been generated by gen_settings from /home/pprz/Projects/paparazzi/var/aircrafts/HOOPS_110/settings_autopilot.xml /home/pprz/Projects/paparazzi/var/aircrafts/HOOPS_110/settings_telemetry.xml /home/pprz/Projects/paparazzi/var/aircrafts/HOOPS_110/settings_flightplan.xml /home/pprz/Projects/paparazzi/var/aircrafts/HOOPS_110/settings_modules.xml -- /home/pprz/Projects/paparazzi/conf/settings/rotorcraft_basic.xml /home/pprz/Projects/paparazzi/conf/modules/object_tracking.xml /home/pprz/Projects/paparazzi/conf/modules/jevois.xml /home/pprz/Projects/paparazzi/conf/modules/stabilization_int_quat.xml /home/pprz/Projects/paparazzi/conf/modules/nav_basic_rotorcraft.xml /home/pprz/Projects/paparazzi/conf/modules/guidance_rotorcraft.xml /home/pprz/Projects/paparazzi/conf/modules/ahrs_int_cmpl_quat.xml /home/pprz/Projects/paparazzi/conf/modules/gps.xml */
/* Version v5.13_devel-none-ga6fec87d6-dirty */
/* Please DO NOT EDIT */

#ifndef SETTINGS_H
#define SETTINGS_H

#define RCSettings(mode_changed) { \
}

#include "autopilot.h"
#include "generated/periodic_telemetry.h"
#include "guidance/guidance_h.h"
#include "guidance/guidance_v.h"
#include "modules/ctrl/object_tracking.h"
#include "modules/sensors/cameras/jevois.h"
#include "navigation.h"
#include "stabilization/stabilization_attitude_common_int.h"
#include "stabilization/stabilization_attitude_quat_int.h"
#include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
#include "subsystems/gps.h"
#include "generated/modules.h"

#define SETTINGS_NAMES { \
 { "telemetry_mode_Main" }, \
 { "gps_datalink_gps_datalink_periodic_check_status" }, \
 { "autopilot_mode_auto2" }, \
 { "autopilot.kill_throttle" }, \
 { "autopilot.power_switch" }, \
 { "autopilot.mode" }, \
 { "object_tracking_search_rate" }, \
 { "object_tracking_rate" }, \
 { "jevois_mapping_setting" }, \
 { "jevois_stream_setting" }, \
 { "stabilization_gains.p.x" }, \
 { "stabilization_gains.d.x" }, \
 { "stabilization_gains.i.x" }, \
 { "stabilization_gains.dd.x" }, \
 { "stabilization_gains.p.y" }, \
 { "stabilization_gains.d.y" }, \
 { "stabilization_gains.i.y" }, \
 { "stabilization_gains.dd.y" }, \
 { "stabilization_gains.p.z" }, \
 { "stabilization_gains.d.z" }, \
 { "stabilization_gains.i.z" }, \
 { "stabilization_gains.dd.z" }, \
 { "att_ref_quat_i.model.omega.p" }, \
 { "att_ref_quat_i.model.zeta.p" }, \
 { "att_ref_quat_i.model.omega.q" }, \
 { "att_ref_quat_i.model.zeta.q" }, \
 { "att_ref_quat_i.model.omega.r" }, \
 { "att_ref_quat_i.model.zeta.r" }, \
 { "flight_altitude" }, \
 { "nav_heading" }, \
 { "nav_radius" }, \
 { "nav_climb_vspeed" }, \
 { "nav_descend_vspeed" }, \
 { "guidance_v_kp" }, \
 { "guidance_v_kd" }, \
 { "guidance_v_ki" }, \
 { "guidance_v_nominal_throttle" }, \
 { "guidance_v_adapt_throttle_enabled" }, \
 { "guidance_v_z_sp" }, \
 { "guidance_h.use_ref" }, \
 { "gh_ref.max_speed" }, \
 { "guidance_h.approx_force_by_thrust" }, \
 { "gh_ref.tau" }, \
 { "gh_ref.omega" }, \
 { "gh_ref.zeta" }, \
 { "guidance_h.gains.p" }, \
 { "guidance_h.gains.d" }, \
 { "guidance_h.gains.i" }, \
 { "guidance_h.gains.v" }, \
 { "guidance_h.gains.a" }, \
 { "guidance_h.sp.pos.x" }, \
 { "guidance_h.sp.pos.y" }, \
 { "ahrs_icq.gravity_heuristic_factor" }, \
 { "ahrs_icq.accel_omega" }, \
 { "ahrs_icq.accel_zeta" }, \
 { "ahrs_icq.mag_omega" }, \
 { "ahrs_icq.mag_zeta" }, \
 { "multi_gps_mode" }, \
};
#define SETTINGS_NAMES_SHORT { \
 "tel_mod_Mai" , \
 "gps_dat_gps_dat_" , \
 "aut_mod_aut" , \
 "aut_kil_thr" , \
 "aut_pow_swi" , \
 "aut_mod" , \
 "obj_tra_sea_rat" , \
 "obj_tra_rat" , \
 "jev_map_set" , \
 "jev_str_set" , \
 "sta_gai_p_x" , \
 "sta_gai_d_x" , \
 "sta_gai_i_x" , \
 "sta_gai_dd_x" , \
 "sta_gai_p_y" , \
 "sta_gai_d_y" , \
 "sta_gai_i_y" , \
 "sta_gai_dd_y" , \
 "sta_gai_p_z" , \
 "sta_gai_d_z" , \
 "sta_gai_i_z" , \
 "sta_gai_dd_z" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "fli_alt" , \
 "nav_hea" , \
 "nav_rad" , \
 "nav_cli_vsp" , \
 "nav_des_vsp" , \
 "gui_v_kp" , \
 "gui_v_kd" , \
 "gui_v_ki" , \
 "gui_v_nom_thr" , \
 "gui_v_ada_thr_en" , \
 "gui_v_z_sp" , \
 "gui_h_use_ref" , \
 "gh_ref_max_spe" , \
 "gui_h_app_for_by" , \
 "gh_ref_tau" , \
 "gh_ref_ome" , \
 "gh_ref_zet" , \
 "gui_h_gai_p" , \
 "gui_h_gai_d" , \
 "gui_h_gai_i" , \
 "gui_h_gai_v" , \
 "gui_h_gai_a" , \
 "gui_h_sp_pos_x" , \
 "gui_h_sp_pos_y" , \
 "ahr_icq_gra_heu_" , \
 "ahr_icq_acc_ome" , \
 "ahr_icq_acc_zet" , \
 "ahr_icq_mag_ome" , \
 "ahr_icq_mag_zet" , \
 "mul_gps_mod" , \
};
#define NB_SETTING 58
#define DlSetting(_idx, _value) { \
  switch (_idx) { \
    case 0: telemetry_mode_Main = _value; break;\
    case 1: gps_datalink_gps_datalink_periodic_check_status = _value; break;\
    case 2: autopilot_mode_auto2 = _value; break;\
    case 3: autopilot_KillThrottle( _value ); _value = autopilot.kill_throttle; break;\
    case 4: autopilot_SetPowerSwitch( _value ); _value = autopilot.power_switch; break;\
    case 5: autopilot_SetModeHandler( _value ); _value = autopilot.mode; break;\
    case 6: object_tracking_search_rate = _value; break;\
    case 7: object_tracking_rate = _value; break;\
    case 8: jevois_setmapping( _value ); _value = jevois_mapping_setting; break;\
    case 9: jevois_stream( _value ); _value = jevois_stream_setting; break;\
    case 10: stabilization_gains.p.x = _value; break;\
    case 11: stabilization_gains.d.x = _value; break;\
    case 12: stabilization_gains.i.x = _value; break;\
    case 13: stabilization_gains.dd.x = _value; break;\
    case 14: stabilization_gains.p.y = _value; break;\
    case 15: stabilization_gains.d.y = _value; break;\
    case 16: stabilization_gains.i.y = _value; break;\
    case 17: stabilization_gains.dd.y = _value; break;\
    case 18: stabilization_gains.p.z = _value; break;\
    case 19: stabilization_gains.d.z = _value; break;\
    case 20: stabilization_gains.i.z = _value; break;\
    case 21: stabilization_gains.dd.z = _value; break;\
    case 22: stabilization_attitude_quat_int_SetOmegaP( _value ); _value = att_ref_quat_i.model.omega.p; break;\
    case 23: stabilization_attitude_quat_int_SetZetaP( _value ); _value = att_ref_quat_i.model.zeta.p; break;\
    case 24: stabilization_attitude_quat_int_SetOmegaQ( _value ); _value = att_ref_quat_i.model.omega.q; break;\
    case 25: stabilization_attitude_quat_int_SetZetaQ( _value ); _value = att_ref_quat_i.model.zeta.q; break;\
    case 26: stabilization_attitude_quat_int_SetOmegaR( _value ); _value = att_ref_quat_i.model.omega.r; break;\
    case 27: stabilization_attitude_quat_int_SetZetaR( _value ); _value = att_ref_quat_i.model.zeta.r; break;\
    case 28: navigation_SetFlightAltitude( _value ); _value = flight_altitude; break;\
    case 29: nav_heading = _value; break;\
    case 30: nav_radius = _value; break;\
    case 31: nav_climb_vspeed = _value; break;\
    case 32: nav_descend_vspeed = _value; break;\
    case 33: guidance_v_kp = _value; break;\
    case 34: guidance_v_kd = _value; break;\
    case 35: guidance_v_SetKi( _value ); _value = guidance_v_ki; break;\
    case 36: guidance_v_nominal_throttle = _value; break;\
    case 37: guidance_v_adapt_throttle_enabled = _value; break;\
    case 38: guidance_v_z_sp = _value; break;\
    case 39: guidance_h_SetUseRef( _value ); _value = guidance_h.use_ref; break;\
    case 40: guidance_h_SetMaxSpeed( _value ); _value = gh_ref.max_speed; break;\
    case 41: guidance_h.approx_force_by_thrust = _value; break;\
    case 42: guidance_h_SetTau( _value ); _value = gh_ref.tau; break;\
    case 43: guidance_h_SetOmega( _value ); _value = gh_ref.omega; break;\
    case 44: guidance_h_SetZeta( _value ); _value = gh_ref.zeta; break;\
    case 45: guidance_h.gains.p = _value; break;\
    case 46: guidance_h.gains.d = _value; break;\
    case 47: guidance_h_set_igain( _value ); _value = guidance_h.gains.i; break;\
    case 48: guidance_h.gains.v = _value; break;\
    case 49: guidance_h.gains.a = _value; break;\
    case 50: guidance_h.sp.pos.x = _value; break;\
    case 51: guidance_h.sp.pos.y = _value; break;\
    case 52: ahrs_icq.gravity_heuristic_factor = _value; break;\
    case 53: ahrs_int_cmpl_quat_SetAccelOmega( _value ); _value = ahrs_icq.accel_omega; break;\
    case 54: ahrs_int_cmpl_quat_SetAccelZeta( _value ); _value = ahrs_icq.accel_zeta; break;\
    case 55: ahrs_int_cmpl_quat_SetMagOmega( _value ); _value = ahrs_icq.mag_omega; break;\
    case 56: ahrs_int_cmpl_quat_SetMagZeta( _value ); _value = ahrs_icq.mag_zeta; break;\
    case 57: multi_gps_mode = _value; break;\
    default: break;\
  }\
}
#define PeriodicSendDlValue(_trans, _dev) { \
  static uint8_t i;\
  float var;\
  if (i >= 58) i = 0;\
  switch (i) { \
    case 0: var = telemetry_mode_Main; break;\
    case 1: var = gps_datalink_gps_datalink_periodic_check_status; break;\
    case 2: var = autopilot_mode_auto2; break;\
    case 3: var = autopilot.kill_throttle; break;\
    case 4: var = autopilot.power_switch; break;\
    case 5: var = autopilot.mode; break;\
    case 6: var = object_tracking_search_rate; break;\
    case 7: var = object_tracking_rate; break;\
    case 8: var = jevois_mapping_setting; break;\
    case 9: var = jevois_stream_setting; break;\
    case 10: var = stabilization_gains.p.x; break;\
    case 11: var = stabilization_gains.d.x; break;\
    case 12: var = stabilization_gains.i.x; break;\
    case 13: var = stabilization_gains.dd.x; break;\
    case 14: var = stabilization_gains.p.y; break;\
    case 15: var = stabilization_gains.d.y; break;\
    case 16: var = stabilization_gains.i.y; break;\
    case 17: var = stabilization_gains.dd.y; break;\
    case 18: var = stabilization_gains.p.z; break;\
    case 19: var = stabilization_gains.d.z; break;\
    case 20: var = stabilization_gains.i.z; break;\
    case 21: var = stabilization_gains.dd.z; break;\
    case 22: var = att_ref_quat_i.model.omega.p; break;\
    case 23: var = att_ref_quat_i.model.zeta.p; break;\
    case 24: var = att_ref_quat_i.model.omega.q; break;\
    case 25: var = att_ref_quat_i.model.zeta.q; break;\
    case 26: var = att_ref_quat_i.model.omega.r; break;\
    case 27: var = att_ref_quat_i.model.zeta.r; break;\
    case 28: var = flight_altitude; break;\
    case 29: var = nav_heading; break;\
    case 30: var = nav_radius; break;\
    case 31: var = nav_climb_vspeed; break;\
    case 32: var = nav_descend_vspeed; break;\
    case 33: var = guidance_v_kp; break;\
    case 34: var = guidance_v_kd; break;\
    case 35: var = guidance_v_ki; break;\
    case 36: var = guidance_v_nominal_throttle; break;\
    case 37: var = guidance_v_adapt_throttle_enabled; break;\
    case 38: var = guidance_v_z_sp; break;\
    case 39: var = guidance_h.use_ref; break;\
    case 40: var = gh_ref.max_speed; break;\
    case 41: var = guidance_h.approx_force_by_thrust; break;\
    case 42: var = gh_ref.tau; break;\
    case 43: var = gh_ref.omega; break;\
    case 44: var = gh_ref.zeta; break;\
    case 45: var = guidance_h.gains.p; break;\
    case 46: var = guidance_h.gains.d; break;\
    case 47: var = guidance_h.gains.i; break;\
    case 48: var = guidance_h.gains.v; break;\
    case 49: var = guidance_h.gains.a; break;\
    case 50: var = guidance_h.sp.pos.x; break;\
    case 51: var = guidance_h.sp.pos.y; break;\
    case 52: var = ahrs_icq.gravity_heuristic_factor; break;\
    case 53: var = ahrs_icq.accel_omega; break;\
    case 54: var = ahrs_icq.accel_zeta; break;\
    case 55: var = ahrs_icq.mag_omega; break;\
    case 56: var = ahrs_icq.mag_zeta; break;\
    case 57: var = multi_gps_mode; break;\
    default: var = 0.; break;\
  }\
  pprz_msg_send_DL_VALUE(_trans, _dev, AC_ID, &i, &var);\
  i++;\
}
static inline float settings_get_value(uint8_t i) {
  switch (i) {
    case 0: return telemetry_mode_Main;
    case 1: return gps_datalink_gps_datalink_periodic_check_status;
    case 2: return autopilot_mode_auto2;
    case 3: return autopilot.kill_throttle;
    case 4: return autopilot.power_switch;
    case 5: return autopilot.mode;
    case 6: return object_tracking_search_rate;
    case 7: return object_tracking_rate;
    case 8: return jevois_mapping_setting;
    case 9: return jevois_stream_setting;
    case 10: return stabilization_gains.p.x;
    case 11: return stabilization_gains.d.x;
    case 12: return stabilization_gains.i.x;
    case 13: return stabilization_gains.dd.x;
    case 14: return stabilization_gains.p.y;
    case 15: return stabilization_gains.d.y;
    case 16: return stabilization_gains.i.y;
    case 17: return stabilization_gains.dd.y;
    case 18: return stabilization_gains.p.z;
    case 19: return stabilization_gains.d.z;
    case 20: return stabilization_gains.i.z;
    case 21: return stabilization_gains.dd.z;
    case 22: return att_ref_quat_i.model.omega.p;
    case 23: return att_ref_quat_i.model.zeta.p;
    case 24: return att_ref_quat_i.model.omega.q;
    case 25: return att_ref_quat_i.model.zeta.q;
    case 26: return att_ref_quat_i.model.omega.r;
    case 27: return att_ref_quat_i.model.zeta.r;
    case 28: return flight_altitude;
    case 29: return nav_heading;
    case 30: return nav_radius;
    case 31: return nav_climb_vspeed;
    case 32: return nav_descend_vspeed;
    case 33: return guidance_v_kp;
    case 34: return guidance_v_kd;
    case 35: return guidance_v_ki;
    case 36: return guidance_v_nominal_throttle;
    case 37: return guidance_v_adapt_throttle_enabled;
    case 38: return guidance_v_z_sp;
    case 39: return guidance_h.use_ref;
    case 40: return gh_ref.max_speed;
    case 41: return guidance_h.approx_force_by_thrust;
    case 42: return gh_ref.tau;
    case 43: return gh_ref.omega;
    case 44: return gh_ref.zeta;
    case 45: return guidance_h.gains.p;
    case 46: return guidance_h.gains.d;
    case 47: return guidance_h.gains.i;
    case 48: return guidance_h.gains.v;
    case 49: return guidance_h.gains.a;
    case 50: return guidance_h.sp.pos.x;
    case 51: return guidance_h.sp.pos.y;
    case 52: return ahrs_icq.gravity_heuristic_factor;
    case 53: return ahrs_icq.accel_omega;
    case 54: return ahrs_icq.accel_zeta;
    case 55: return ahrs_icq.mag_omega;
    case 56: return ahrs_icq.mag_zeta;
    case 57: return multi_gps_mode;
    default: return 0.;
  }
}

/* Persistent Settings */
struct PersistentSettings {
  int32_t s_0; /* stabilization_gains.p.x */
  int32_t s_1; /* stabilization_gains.d.x */
  int32_t s_2; /* stabilization_gains.i.x */
  int32_t s_3; /* stabilization_gains.dd.x */
  int32_t s_4; /* stabilization_gains.p.y */
  int32_t s_5; /* stabilization_gains.d.y */
  int32_t s_6; /* stabilization_gains.i.y */
  int32_t s_7; /* stabilization_gains.dd.y */
  int32_t s_8; /* stabilization_gains.p.z */
  int32_t s_9; /* stabilization_gains.d.z */
  int32_t s_10; /* stabilization_gains.i.z */
  int32_t s_11; /* stabilization_gains.dd.z */
  float s_12; /* guidance_v_kp */
  float s_13; /* guidance_v_kd */
  float s_14; /* guidance_v_ki */
  float s_15; /* guidance_v_nominal_throttle */
  float s_16; /* guidance_v_adapt_throttle_enabled */
  float s_17; /* guidance_h.use_ref */
  float s_18; /* gh_ref.max_speed */
  uint8_t s_19; /* guidance_h.approx_force_by_thrust */
  float s_20; /* gh_ref.tau */
  float s_21; /* gh_ref.omega */
  float s_22; /* gh_ref.zeta */
  int32_t s_23; /* guidance_h.gains.p */
  int32_t s_24; /* guidance_h.gains.d */
  int32_t s_25; /* guidance_h.gains.i */
  int32_t s_26; /* guidance_h.gains.v */
  int32_t s_27; /* guidance_h.gains.a */
  uint8_t s_28; /* ahrs_icq.gravity_heuristic_factor */
  float s_29; /* ahrs_icq.accel_omega */
  float s_30; /* ahrs_icq.accel_zeta */
  float s_31; /* ahrs_icq.mag_omega */
  float s_32; /* ahrs_icq.mag_zeta */
};

extern struct PersistentSettings pers_settings;

static inline void persistent_settings_store( void ) {
  pers_settings.s_0 = stabilization_gains.p.x;
  pers_settings.s_1 = stabilization_gains.d.x;
  pers_settings.s_2 = stabilization_gains.i.x;
  pers_settings.s_3 = stabilization_gains.dd.x;
  pers_settings.s_4 = stabilization_gains.p.y;
  pers_settings.s_5 = stabilization_gains.d.y;
  pers_settings.s_6 = stabilization_gains.i.y;
  pers_settings.s_7 = stabilization_gains.dd.y;
  pers_settings.s_8 = stabilization_gains.p.z;
  pers_settings.s_9 = stabilization_gains.d.z;
  pers_settings.s_10 = stabilization_gains.i.z;
  pers_settings.s_11 = stabilization_gains.dd.z;
  pers_settings.s_12 = guidance_v_kp;
  pers_settings.s_13 = guidance_v_kd;
  pers_settings.s_14 = guidance_v_ki;
  pers_settings.s_15 = guidance_v_nominal_throttle;
  pers_settings.s_16 = guidance_v_adapt_throttle_enabled;
  pers_settings.s_17 = guidance_h.use_ref;
  pers_settings.s_18 = gh_ref.max_speed;
  pers_settings.s_19 = guidance_h.approx_force_by_thrust;
  pers_settings.s_20 = gh_ref.tau;
  pers_settings.s_21 = gh_ref.omega;
  pers_settings.s_22 = gh_ref.zeta;
  pers_settings.s_23 = guidance_h.gains.p;
  pers_settings.s_24 = guidance_h.gains.d;
  pers_settings.s_25 = guidance_h.gains.i;
  pers_settings.s_26 = guidance_h.gains.v;
  pers_settings.s_27 = guidance_h.gains.a;
  pers_settings.s_28 = ahrs_icq.gravity_heuristic_factor;
  pers_settings.s_29 = ahrs_icq.accel_omega;
  pers_settings.s_30 = ahrs_icq.accel_zeta;
  pers_settings.s_31 = ahrs_icq.mag_omega;
  pers_settings.s_32 = ahrs_icq.mag_zeta;
}

static inline void persistent_settings_load( void ) {
  stabilization_gains.p.x = pers_settings.s_0;
  stabilization_gains.d.x = pers_settings.s_1;
  stabilization_gains.i.x = pers_settings.s_2;
  stabilization_gains.dd.x = pers_settings.s_3;
  stabilization_gains.p.y = pers_settings.s_4;
  stabilization_gains.d.y = pers_settings.s_5;
  stabilization_gains.i.y = pers_settings.s_6;
  stabilization_gains.dd.y = pers_settings.s_7;
  stabilization_gains.p.z = pers_settings.s_8;
  stabilization_gains.d.z = pers_settings.s_9;
  stabilization_gains.i.z = pers_settings.s_10;
  stabilization_gains.dd.z = pers_settings.s_11;
  guidance_v_kp = pers_settings.s_12;
  guidance_v_kd = pers_settings.s_13;
  guidance_v_SetKi( pers_settings.s_14 );
  guidance_v_nominal_throttle = pers_settings.s_15;
  guidance_v_adapt_throttle_enabled = pers_settings.s_16;
  guidance_h_SetUseRef( pers_settings.s_17 );
  guidance_h_SetMaxSpeed( pers_settings.s_18 );
  guidance_h.approx_force_by_thrust = pers_settings.s_19;
  guidance_h_SetTau( pers_settings.s_20 );
  guidance_h_SetOmega( pers_settings.s_21 );
  guidance_h_SetZeta( pers_settings.s_22 );
  guidance_h.gains.p = pers_settings.s_23;
  guidance_h.gains.d = pers_settings.s_24;
  guidance_h_set_igain( pers_settings.s_25 );
  guidance_h.gains.v = pers_settings.s_26;
  guidance_h.gains.a = pers_settings.s_27;
  ahrs_icq.gravity_heuristic_factor = pers_settings.s_28;
  ahrs_int_cmpl_quat_SetAccelOmega( pers_settings.s_29 );
  ahrs_int_cmpl_quat_SetAccelZeta( pers_settings.s_30 );
  ahrs_int_cmpl_quat_SetMagOmega( pers_settings.s_31 );
  ahrs_int_cmpl_quat_SetMagZeta( pers_settings.s_32 );
}

#endif // SETTINGS_H
