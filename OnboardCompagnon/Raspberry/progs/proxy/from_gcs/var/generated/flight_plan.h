/* This file has been generated by gen_flight_plan from /home/pprz/Projects/paparazzi/conf/flight_plans/ENAC/rotorcraft_face_tracking.xml */
/* Version v5.13_devel-none-ga6fec87d6-dirty */
/* Please DO NOT EDIT */

#ifndef FLIGHT_PLAN_H
#define FLIGHT_PLAN_H

#include "std.h"
#include "generated/modules.h"
#include "subsystems/abi.h"
#include "autopilot.h"




#define FLIGHT_PLAN_NAME "Rotorcraft Optitrack (ENAC)"
#define NAV_DEFAULT_ALT 148 /* nominal altitude of the flight plan */
#define NAV_UTM_EAST0 377482
#define NAV_UTM_NORTH0 4824577
#define NAV_UTM_ZONE0 31
#define NAV_LAT0 435640917 /* 1e7deg */
#define NAV_LON0 14829201 /* 1e7deg */
#define NAV_ALT0 146000 /* mm above msl */
#define NAV_MSL0 51850 /* mm, EGM96 geoid-height (msl) over ellipsoid */
#define QFU 0.0
#define WP_dummy 0
#define WP_HOME 1
#define WP_GOAL 2
#define WP_STDBY 3
#define WP_TD 4
#define WP_S1 5
#define WP_S2 6
#define WP_S3 7
#define WP_S4 8
#define WP__N1 9
#define WP__N2 10
#define WP__N3 11
#define WP__N4 12
#define WAYPOINTS_UTM { \
 {42.0, 42.0, 147.5},\
 {0.0, 0.0, 147.5},\
 {2.0, 2.0, 147.5},\
 {-0.7, -0.8, 147.5},\
 {0.8, -1.7, 147.5},\
 {3.0, 4.0, 147.5},\
 {3.0, -4.0, 147.5},\
 {-3.0, -4.0, 147.5},\
 {-3.0, 4.0, 147.5},\
 {4.5, 5.2, 147.5},\
 {4.5, -5.2, 147.5},\
 {-4.5, -5.2, 147.5},\
 {-4.5, 5.2, 147.5},\
};
#define WAYPOINTS_ENU { \
 {41.24, 42.77, 1.50}, /* ENU in meters  */ \
 {0.00, 0.00, 1.50}, /* ENU in meters  */ \
 {1.96, 2.04, 1.50}, /* ENU in meters  */ \
 {-0.69, -0.81, 1.50}, /* ENU in meters  */ \
 {0.83, -1.69, 1.50}, /* ENU in meters  */ \
 {2.93, 4.06, 1.50}, /* ENU in meters  */ \
 {3.07, -3.95, 1.50}, /* ENU in meters  */ \
 {-2.93, -4.06, 1.50}, /* ENU in meters  */ \
 {-3.07, 3.95, 1.50}, /* ENU in meters  */ \
 {4.41, 5.28, 1.50}, /* ENU in meters  */ \
 {4.60, -5.12, 1.50}, /* ENU in meters  */ \
 {-4.41, -5.28, 1.50}, /* ENU in meters  */ \
 {-4.60, 5.12, 1.50}, /* ENU in meters  */ \
};
#define WAYPOINTS_LLA { \
 {.lat=435644766, .lon=14834304, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640916, .lon=14829201, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641100, .lon=14829444, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640843, .lon=14829116, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640765, .lon=14829303, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641281, .lon=14829563, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640561, .lon=14829581, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640552, .lon=14828838, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641272, .lon=14828820, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641392, .lon=14829746, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640456, .lon=14829769, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435640441, .lon=14828655, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
 {.lat=435641377, .lon=14828632, .alt=147500}, /* 1e7deg, 1e7deg, mm (above NAV_MSL0, local msl=51.85m) */ \
};
#define WAYPOINTS_LLA_WGS84 { \
 {.lat=435644766, .lon=14834304, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640916, .lon=14829201, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641100, .lon=14829444, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640843, .lon=14829116, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640765, .lon=14829303, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641281, .lon=14829563, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640561, .lon=14829581, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640552, .lon=14828838, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641272, .lon=14828820, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641392, .lon=14829746, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640456, .lon=14829769, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435640441, .lon=14828655, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
 {.lat=435641377, .lon=14828632, .alt=199350}, /* 1e7deg, 1e7deg, mm (above WGS84 ref ellipsoid) */ \
};
#define WAYPOINTS_GLOBAL { \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
 FALSE, \
};
#define NB_WAYPOINT 13
#define FP_BLOCKS { \
 "Wait GPS" , \
 "Holding point" , \
 "Start Engine" , \
 "Takeoff" , \
 "Standby" , \
 "START" , \
 "StayGoal" , \
 "land here" , \
 "land" , \
 "flare" , \
 "landed" , \
 "HOME" , \
}
#define NB_BLOCK 12
#define GROUND_ALT 146.
#define GROUND_ALT_CM 14600
#define SECURITY_HEIGHT 0.3
#define SECURITY_ALT 146.3
#define HOME_MODE_HEIGHT 0.3
#define MAX_DIST_FROM_HOME 20.

#ifdef NAV_C


static inline void auto_nav_init(void) {
}

static inline bool InsideNet(float _x, float _y) {
  if (_y <= 5.2) {
    if (_y <= -5.2) {
      return FALSE;
    } else {
      return (-4.5<= _x && _x <= 4.5);
    }
  } else {
    return FALSE;
  }
}
static inline bool InsideSurvey(float _x, float _y) {
  uint8_t i, j;
  bool c = false;
  const uint8_t nb_pts = 4;
  const uint8_t wps_id[] = { 5, 6, 7, 8 };

  for (i = 0, j = nb_pts - 1; i < nb_pts; j = i++) {
    if (((WaypointY(wps_id[i]) > _y) != (WaypointY(wps_id[j]) > _y)) &&
       (_x < (WaypointX(wps_id[j])-WaypointX(wps_id[i])) * (_y-WaypointY(wps_id[i])) / (WaypointY(wps_id[j])-WaypointY(wps_id[i])) + WaypointX(wps_id[i]))) {
      if (c == TRUE) { c = FALSE; } else { c = TRUE; }
    }
  }
  return c;
}

static inline void auto_nav(void) {
  switch (nav_block) {
    Block(0) // Wait GPS
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Label(while_1)
      Stage(1)
        if (! (!(GpsFixValid()))) Goto(endwhile_2) else NextStageAndBreak();
        Stage(2)
          Goto(while_1)
        Label(endwhile_2)
      /* Falls through. */
      default:
      Stage(3)
        NextBlock();
        break;
    }
    break;

    Block(1) // Holding point
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(2) // Start Engine
    switch(nav_stage) {
      Stage(0)
        NavResurrect();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(3) // Takeoff
    if ((nav_block != 4) && ((stateGetPositionEnu_f())->z>1.000000)) { GotoBlock(4); return; }
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_STDBY);
        NextStage();
      Stage(1)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav_climb_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(4) // Standby
    switch(nav_stage) {
      Stage(0)
        NavGotoWaypoint(3);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(3), 0.);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(5) // START
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_GOAL);
        NextStage();
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(6) // StayGoal
    switch(nav_stage) {
      Stage(0)
        object_tracking_run();
        NavGotoWaypoint(2);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalAltitudeMode(WaypointAlt(2), 0.);
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(7) // land here
    switch(nav_stage) {
      Stage(0)
        NavSetWaypointHere(WP_TD);
        NextStage();
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(8) // land
    switch(nav_stage) {
      Stage(0)
        if (NavApproaching(4,CARROT)) {
          NextStageAndBreakFrom(4);
        } else {
          NavGotoWaypoint(4);
          NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
          NavVerticalAltitudeMode(WaypointAlt(4), 0.);
        }
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    Block(9) // flare
    if ((nav_block != 1) && NavDetectGround()) { GotoBlock(1); return; }
    if ((nav_block != 10) && !(nav_is_in_flight())) { GotoBlock(10); return; }
    switch(nav_stage) {
      Stage(0)
        NavStartDetectGround();
        NextStage();
      Stage(1)
        NavGotoWaypoint(4);
        NavVerticalAutoThrottleMode(RadOfDeg(0.000000));
        NavVerticalClimbMode(nav_descend_vspeed);
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(10) // landed
    switch(nav_stage) {
      Stage(0)
        NavKillThrottle();
        NextStage();
      Stage(1)
        NavAttitude(RadOfDeg(0));
        NavVerticalAutoThrottleMode(RadOfDeg(0));
        NavVerticalThrottleMode(9600*(0));
        if (FALSE) {
          NextStageAndBreak()
        }
        break;
      /* Falls through. */
      default:
      Stage(2)
        NextBlock();
        break;
    }
    break;

    Block(11) // HOME
    switch(nav_stage) {
      Stage(0)
        nav_home();
        break;
      /* Falls through. */
      default:
      Stage(1)
        NextBlock();
        break;
    }
    break;

    default: break;
  }
}
#endif // NAV_C

#endif // FLIGHT_PLAN_H
